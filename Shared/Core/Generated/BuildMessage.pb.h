// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BuildMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BuildMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BuildMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BuildMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BuildMessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BuildMessage_2eproto;
namespace ubavs {
class BuildMessage;
struct BuildMessageDefaultTypeInternal;
extern BuildMessageDefaultTypeInternal _BuildMessage_default_instance_;
}  // namespace ubavs
PROTOBUF_NAMESPACE_OPEN
template<> ::ubavs::BuildMessage* Arena::CreateMaybeMessage<::ubavs::BuildMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubavs {

// ===================================================================

class BuildMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubavs.BuildMessage) */ {
 public:
  inline BuildMessage() : BuildMessage(nullptr) {}
  ~BuildMessage() override;
  explicit PROTOBUF_CONSTEXPR BuildMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuildMessage(const BuildMessage& from);
  BuildMessage(BuildMessage&& from) noexcept
    : BuildMessage() {
    *this = ::std::move(from);
  }

  inline BuildMessage& operator=(const BuildMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildMessage& operator=(BuildMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuildMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuildMessage* internal_default_instance() {
    return reinterpret_cast<const BuildMessage*>(
               &_BuildMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BuildMessage& a, BuildMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BuildMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BuildMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BuildMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BuildMessage& from) {
    BuildMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubavs.BuildMessage";
  }
  protected:
  explicit BuildMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentFieldNumber = 3,
    kCommandLineFieldNumber = 1,
    kCurrentDirectoryFieldNumber = 2,
  };
  // repeated string environment = 3;
  int environment_size() const;
  private:
  int _internal_environment_size() const;
  public:
  void clear_environment();
  const std::string& environment(int index) const;
  std::string* mutable_environment(int index);
  void set_environment(int index, const std::string& value);
  void set_environment(int index, std::string&& value);
  void set_environment(int index, const char* value);
  void set_environment(int index, const char* value, size_t size);
  std::string* add_environment();
  void add_environment(const std::string& value);
  void add_environment(std::string&& value);
  void add_environment(const char* value);
  void add_environment(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& environment() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_environment();
  private:
  const std::string& _internal_environment(int index) const;
  std::string* _internal_add_environment();
  public:

  // optional string commandLine = 1;
  bool has_commandline() const;
  private:
  bool _internal_has_commandline() const;
  public:
  void clear_commandline();
  const std::string& commandline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commandline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commandline();
  PROTOBUF_NODISCARD std::string* release_commandline();
  void set_allocated_commandline(std::string* commandline);
  private:
  const std::string& _internal_commandline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commandline(const std::string& value);
  std::string* _internal_mutable_commandline();
  public:

  // optional string currentDirectory = 2;
  bool has_currentdirectory() const;
  private:
  bool _internal_has_currentdirectory() const;
  public:
  void clear_currentdirectory();
  const std::string& currentdirectory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currentdirectory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currentdirectory();
  PROTOBUF_NODISCARD std::string* release_currentdirectory();
  void set_allocated_currentdirectory(std::string* currentdirectory);
  private:
  const std::string& _internal_currentdirectory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currentdirectory(const std::string& value);
  std::string* _internal_mutable_currentdirectory();
  public:

  // @@protoc_insertion_point(class_scope:ubavs.BuildMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> environment_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commandline_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currentdirectory_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BuildMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BuildMessage

// optional string commandLine = 1;
inline bool BuildMessage::_internal_has_commandline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuildMessage::has_commandline() const {
  return _internal_has_commandline();
}
inline void BuildMessage::clear_commandline() {
  _impl_.commandline_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuildMessage::commandline() const {
  // @@protoc_insertion_point(field_get:ubavs.BuildMessage.commandLine)
  return _internal_commandline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildMessage::set_commandline(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.commandline_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ubavs.BuildMessage.commandLine)
}
inline std::string* BuildMessage::mutable_commandline() {
  std::string* _s = _internal_mutable_commandline();
  // @@protoc_insertion_point(field_mutable:ubavs.BuildMessage.commandLine)
  return _s;
}
inline const std::string& BuildMessage::_internal_commandline() const {
  return _impl_.commandline_.Get();
}
inline void BuildMessage::_internal_set_commandline(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.commandline_.Set(value, GetArenaForAllocation());
}
inline std::string* BuildMessage::_internal_mutable_commandline() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.commandline_.Mutable(GetArenaForAllocation());
}
inline std::string* BuildMessage::release_commandline() {
  // @@protoc_insertion_point(field_release:ubavs.BuildMessage.commandLine)
  if (!_internal_has_commandline()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.commandline_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.commandline_.IsDefault()) {
    _impl_.commandline_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuildMessage::set_allocated_commandline(std::string* commandline) {
  if (commandline != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.commandline_.SetAllocated(commandline, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.commandline_.IsDefault()) {
    _impl_.commandline_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ubavs.BuildMessage.commandLine)
}

// optional string currentDirectory = 2;
inline bool BuildMessage::_internal_has_currentdirectory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BuildMessage::has_currentdirectory() const {
  return _internal_has_currentdirectory();
}
inline void BuildMessage::clear_currentdirectory() {
  _impl_.currentdirectory_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BuildMessage::currentdirectory() const {
  // @@protoc_insertion_point(field_get:ubavs.BuildMessage.currentDirectory)
  return _internal_currentdirectory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BuildMessage::set_currentdirectory(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.currentdirectory_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ubavs.BuildMessage.currentDirectory)
}
inline std::string* BuildMessage::mutable_currentdirectory() {
  std::string* _s = _internal_mutable_currentdirectory();
  // @@protoc_insertion_point(field_mutable:ubavs.BuildMessage.currentDirectory)
  return _s;
}
inline const std::string& BuildMessage::_internal_currentdirectory() const {
  return _impl_.currentdirectory_.Get();
}
inline void BuildMessage::_internal_set_currentdirectory(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.currentdirectory_.Set(value, GetArenaForAllocation());
}
inline std::string* BuildMessage::_internal_mutable_currentdirectory() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.currentdirectory_.Mutable(GetArenaForAllocation());
}
inline std::string* BuildMessage::release_currentdirectory() {
  // @@protoc_insertion_point(field_release:ubavs.BuildMessage.currentDirectory)
  if (!_internal_has_currentdirectory()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.currentdirectory_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currentdirectory_.IsDefault()) {
    _impl_.currentdirectory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BuildMessage::set_allocated_currentdirectory(std::string* currentdirectory) {
  if (currentdirectory != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.currentdirectory_.SetAllocated(currentdirectory, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currentdirectory_.IsDefault()) {
    _impl_.currentdirectory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ubavs.BuildMessage.currentDirectory)
}

// repeated string environment = 3;
inline int BuildMessage::_internal_environment_size() const {
  return _impl_.environment_.size();
}
inline int BuildMessage::environment_size() const {
  return _internal_environment_size();
}
inline void BuildMessage::clear_environment() {
  _impl_.environment_.Clear();
}
inline std::string* BuildMessage::add_environment() {
  std::string* _s = _internal_add_environment();
  // @@protoc_insertion_point(field_add_mutable:ubavs.BuildMessage.environment)
  return _s;
}
inline const std::string& BuildMessage::_internal_environment(int index) const {
  return _impl_.environment_.Get(index);
}
inline const std::string& BuildMessage::environment(int index) const {
  // @@protoc_insertion_point(field_get:ubavs.BuildMessage.environment)
  return _internal_environment(index);
}
inline std::string* BuildMessage::mutable_environment(int index) {
  // @@protoc_insertion_point(field_mutable:ubavs.BuildMessage.environment)
  return _impl_.environment_.Mutable(index);
}
inline void BuildMessage::set_environment(int index, const std::string& value) {
  _impl_.environment_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ubavs.BuildMessage.environment)
}
inline void BuildMessage::set_environment(int index, std::string&& value) {
  _impl_.environment_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ubavs.BuildMessage.environment)
}
inline void BuildMessage::set_environment(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.environment_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubavs.BuildMessage.environment)
}
inline void BuildMessage::set_environment(int index, const char* value, size_t size) {
  _impl_.environment_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubavs.BuildMessage.environment)
}
inline std::string* BuildMessage::_internal_add_environment() {
  return _impl_.environment_.Add();
}
inline void BuildMessage::add_environment(const std::string& value) {
  _impl_.environment_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubavs.BuildMessage.environment)
}
inline void BuildMessage::add_environment(std::string&& value) {
  _impl_.environment_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubavs.BuildMessage.environment)
}
inline void BuildMessage::add_environment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.environment_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubavs.BuildMessage.environment)
}
inline void BuildMessage::add_environment(const char* value, size_t size) {
  _impl_.environment_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubavs.BuildMessage.environment)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BuildMessage::environment() const {
  // @@protoc_insertion_point(field_list:ubavs.BuildMessage.environment)
  return _impl_.environment_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BuildMessage::mutable_environment() {
  // @@protoc_insertion_point(field_mutable_list:ubavs.BuildMessage.environment)
  return &_impl_.environment_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ubavs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BuildMessage_2eproto
